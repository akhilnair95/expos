alias process_table_entry R0;
alias currentPID R1;

// Getting the current pid from s/m stat table
currentPID = [SYSTEM_STATUS_TABLE + 1];

//Saving the Kernel SP, PTBR , PTLR to PCB
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPID R2;

//print "to schedule";

//find out the next ready or created process

newPID = (currentPID + 1) % 16;

alias new_process_table R0;

// Changed so that Idle(0) is scheduled only if no process is ready 

while(newPID != currentPID) do
	new_process_table = PROCESS_TABLE + newPID * 16;
	
	if([new_process_table + 4] == READY || [new_process_table + 4] == CREATED) then
		if(newPID != 0) then
			break;
		endif;
	endif;
	
	newPID = (newPID + 1) % 16;
	 
endwhile;

new_process_table = PROCESS_TABLE + newPID * 16;

// If no process available, Schedule idle
if([new_process_table + 4] != READY && [new_process_table + 4] != CREATED) then
	newPID =0;
	new_process_table = PROCESS_TABLE;
endif;


//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

//print newPID;

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
	// Overwrite UserSP
	SP = [new_process_table + 13];
	[new_process_table + 4] = RUNNING;
	ireturn;
endif;

[new_process_table + 4] = RUNNING;

return;
