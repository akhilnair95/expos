alias process_table_entry R0;
alias currentPid R1;

// Getting the current pid from s/m stat table
currentPid = [SYSTEM_STATUS_TABLE + 1];

//Saving the Kernel SP, PTBR , PTLR to PCB
process_table_entry = PROCESS_TABLE + currentPid * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias newPid R2;

//find out the next ready or created process

if(currentPid == 0) then
	newPid = 1;
else
	newPid = 0;
endif;

alias new_process_table R0;
new_process_table = PROCESS_TABLE + newPid * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPid;

if([new_process_table + 4] == CREATED) then
	// Overwrite UserSP
	SP = [new_process_table + 13];
	[new_process_table + 4] = RUNNING;
	ireturn;
endif;

return;
