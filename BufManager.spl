alias fnNumber R1;

if(fnNumber == 1) then
	//BufWrite
	R0 = 1;
else
	//BufRead
	
	alias diskNo R2;
	alias offset R3;
	alias mem R4;
	alias bufNo R5;
	
	bufNo = diskNo %4;
		
	//Acquire Buffer
	while([BUFFER_TABLE + bufNo * 4 + 2] != -1) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_BUFFER;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 5] = bufNo;
		backup; call MOD_5; restore; 
	endwhile;
	
	[BUFFER_TABLE + bufNo * 4 + 2] = [SYSTEM_STATUS_TABLE + 1];
	
	//check if buffer not same as disk block
		
	
	if([BUFFER_TABLE + bufNo * 4 + 0] != diskNo) then
		//check if the buffer present is dirty
		if([BUFFER_TABLE + bufNo * 4 + 1] == 1) then
			// write back buffer;
			
			print "Dirty";
			
			backup;
			R1 = 1;
			R2 = BUFFER_BASE + bufNo;
			R3 = [BUFFER_TABLE + bufNo * 4 + 0];
			
			call MOD_4;
			restore;
			
		endif;
	
		backup;
		
		R1 = 2;
		R3 = diskNo;
		R2 = BUFFER_BASE + bufNo;
				
		call MOD_4;
		
		restore;
					
	endif;
	
	[mem] = [(BUFFER_BASE + bufNo) * 512 + offset]; 
	
	//Relese buffer Wake up processes
	
	[BUFFER_TABLE + bufNo * 4 + 2] = -1;
	
	alias counter R6;
	counter = 0;

	while(counter < 16) do
		if([PROCESS_TABLE + counter * 16 + 4] == WAIT_BUFFER && [PROCESS_TABLE + counter * 16 + 5] == bufNo) then
			[PROCESS_TABLE + counter * 16 + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;

	return;
endif;
