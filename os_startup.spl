alias counter R0;
alias os_set R1;
//---------------------------------------------------------------------
os_set = 0;

if( os_set == 1) then
	
	//load exception
	loadi(2, 15);
	loadi(3, 16);
	
	ireturn;
endif;


//Libr code
loadi(63,13);
loadi(64,14);

//init code
loadi(65,7);
loadi(66,8);

//shell code
loadi(67,9);
loadi(68,10);

//idle code
loadi(69,11);
loadi(70,12);

//---------------------------------------------------------------------

//load timer
loadi(4,17);
loadi(5,18);

//load Disk intr
loadi(6,19);
loadi(7,20);

//load console intr
loadi(8,21);
loadi(9,22);

//---------------------------------------------------------------------
// Load all interrupt handlers

alias pstart R2;
alias bstart R3;

counter = 4;

pstart = 10;
bstart = 23;

while(counter <= 18) do
	loadi(pstart,bstart);
	loadi(pstart+1,bstart+1);
	pstart = pstart + 2;
	bstart = bstart + 2;
	counter = counter + 1;
endwhile;

//---------------------------------------------------------------------
// load all modules

//load module 1
loadi(42,55);
loadi(43,56);

//load module 2
loadi(44,57);
loadi(45,58);

//load module 3
loadi(46,59);
loadi(47,60);

//load module 4
loadi(48,61);
loadi(49,62);

//load module 5
loadi(50,63);
loadi(51,64);

//load module 6
//loadi(52,65);
//loadi(53,66);

//load module 7
//loadi(54,67);
//loadi(55,68);

//---------------------------------------------------------------------
// Load File Data Structures

//load inodetable and UserTable
loadi(59,3);
loadi(60,4);

//---------------------------------------------------------------------
// Initialising PCBs

counter = 0;

while(counter < 16) do
	[PROCESS_TABLE + counter * 16 + 4] = TERMINATED;
	[PROCESS_TABLE + counter * 16 + 1] = counter;
	counter = counter + 1;
endwhile;

//---------------------------------------------------------------------
// Initialising Page Table

counter = 0;

while(counter < 160) do
	[PAGE_TABLE_BASE + counter * 2] = -1;
	[PAGE_TABLE_BASE + counter * 2 + 1] = "0000";
	counter = counter + 1;
endwhile;

//---------------------------------------------------------------------

PTBR = PAGE_TABLE_BASE;
PTLR = 10;

// Load and set the idle code
loadi(69,11);
loadi(70,12);

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 79;
[PTBR+17] = "0110";

// Setting PCB idle
[PROCESS_TABLE + 0] = 0;
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 4] = CREATED;
[PROCESS_TABLE + 11] = 80;
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 13] = 8*512;
[PROCESS_TABLE + 14] = PTBR;
[PROCESS_TABLE + 15] = PTLR;

[79 * 512] = [69*512 + 1];
//---------------------------------------------------------------------

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//---------------------------------------------------------------------

//Page table for init

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//---------------------------------------------------------------------

// Setting PCB init
[PROCESS_TABLE + 16] = 0;
[PROCESS_TABLE + 17] = 1;
[PROCESS_TABLE + 20] = RUNNING;
[PROCESS_TABLE + 27] = 78;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 30] = PTBR;
[PROCESS_TABLE + 31] = PTLR;

//---------------------------------------------------------------------
//Setting S/m status table

[SYSTEM_STATUS_TABLE + 1] = 1;

//---------------------------------------------------------------------

SP = 8*512; 

[76*512] = [65 * 512 + 1]; 

//---------------------------------------------------------------------
//Setting up memory free list

counter = 0;
while(counter < 128) do
	if(counter <= 75) then
		[MEMORY_FREE_LIST + counter] = 1;
	else
		[MEMORY_FREE_LIST + counter] = 0;
	endif;
	counter = counter + 1;
endwhile;

//Setting memory free list entries for stack pages
[MEMORY_FREE_LIST + 76] = 1;
[MEMORY_FREE_LIST + 77] = 1;
[MEMORY_FREE_LIST + 78] = 1;
[MEMORY_FREE_LIST + 79] = 1;
[MEMORY_FREE_LIST + 80] = 1;

//---------------------------------------------------------------------
// Set Disk Status Table

[DISK_STATUS_TABLE] = 0;

os_set = 1;

inline "JMP 514";

