//init
loadi(65,7);
loadi(66,8);

//second process load
//loadi(78,72);

//timer load
loadi(4,17);
loadi(5,18);

//load int 10
loadi(22,35);
loadi(23,36);

//load exception
loadi(2, 15);
loadi(3, 16);

//load int 5
loadi(12,25);
loadi(13,26);

//load module 1
loadi(42,55);
loadi(43,56);

//load module 2
loadi(44,57);

//load module 5
loadi(50,63);

//load module 6
loadi(52,65);

//load int 8
loadi(18,31);
loadi(19,32);

alias counter R0;

// Initialising PCBs

counter = 0;

while(counter < 16) do
	[PROCESS_TABLE + counter * 16 + 4] = TERMINATED;
	[PROCESS_TABLE + counter * 16 + 1] = counter;
	counter = counter + 1;
endwhile;

// Initialising Page Table

counter = 0;

while(counter < 160) do
	[28928 + counter * 2] = -1;
	[28928 + counter * 2 + 1] = "0000";
	counter = counter + 1;
endwhile;


PTBR = 28928;
PTLR = 10;

//Page table for init

[PTBR+0] = 65;
[PTBR+1] = "0100";
[PTBR+2] = 66;
[PTBR+3] = "0100";
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Setting PCB init
[PROCESS_TABLE + 0] = 0;
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 4] = RUNNING;
[PROCESS_TABLE + 11] = 78;
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 14] = PTBR;
[PROCESS_TABLE + 15] = PTLR;

//Setting S/m status table

[SYSTEM_STATUS_TABLE + 1] = 0;

SP = 8*512; 

[76*512] = 0; 

//Setting up memory free list

counter = 0;
while(counter < 128) do
	if(counter <= 75) then
		[MEMORY_FREE_LIST + counter] = 1;
	else
		[MEMORY_FREE_LIST + counter] = 0;
	endif;
	counter = counter + 1;
endwhile;

//Setting memory free list entries for stack pages
[MEMORY_FREE_LIST + 76] = 1;
[MEMORY_FREE_LIST + 77] = 1;
[MEMORY_FREE_LIST + 78] = 1;

ireturn;
